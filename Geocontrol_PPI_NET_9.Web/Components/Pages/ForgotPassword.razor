@page "/forgot-password"
@using Geocontrol_PPI_NET_9.Models.Auth
@using Geocontrol_PPI_NET_9.Web.Services
@using System.Security.Cryptography
@using System.Threading.Tasks
@using Geocontrol_PPI_NET_9.Web.Services.Auth
@using Geocontrol_PPI_NET_9.Web.Services.Loading
@using Geocontrol_PPI_NET_9.Web.Services.Mail

@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthService authService
@inject AuthApiService authApiService
@inject MailService mailService
@inject LoadingService loadingService

<div class="login-container">
	@if (!isCodePhase)
	{
		<div class="login-card">
			<h3 class="login-title">Recuperar contraseña</h3>

			<EditForm Model="@authCode" OnValidSubmit="@HandleRecoverPassword">
				<div class="form-group mb-3">
					<InputText class="form-control text-center"
							   placeholder="Digite su cédula"
							   @bind-Value="authCode.codusu_cedula" />
				</div>

				<button type="submit" class="btn-login">Recuperar contraseña</button>
			</EditForm>
		</div>
	}
	else
	{
		<div class="login-card">
			<h3 class="login-title">Verificación de código</h3>

			<div class="text-center mb-3">
				<span class="fw-bold text-light" style="font-size:1.5rem">@timerDisplay</span>
			</div>

			<EditForm Model="@authCode" OnValidSubmit="@HandleVerifyCode">
				<div class="form-group mb-3">
					<InputText class="form-control text-center"
							   placeholder="Ingrese el código recibido"
							   maxlength="6"
							   @bind-Value="authCode.cod_code" />
				</div>

				<button type="submit" class="btn-login">Verificar código</button>
			</EditForm>
		</div>
	}
</div>

@code {
	private AuthCode authCode = new();
	private bool isCodePhase = false;
	private int remainingSeconds = 300;
	private string timerDisplay = "05:00";
	private int failedAttempts = 0;
	private System.Threading.Timer? timer;

	private async Task HandleRecoverPassword()
	{
		try
		{
			/// Show the splash loading page
			await loadingService.ShowAsync("Enviando correo de recuperación...");

			/// Generate the randomizaer code
			var auxCode = RandomNumberGenerator.GetInt32(100000, 999999).ToString();
			var expirationDate = DateTime.Now.AddMinutes(5);

			var resultEmail = await mailService.SendEmail(authCode.codusu_cedula, auxCode, expirationDate);

			if (!resultEmail.status)
				throw new Exception($"Error al enviar correo: {resultEmail.message}");

			/// Save the created and sended code
			await authApiService.CreateAuthCode(new AuthCode() { cod_code = auxCode, codusu_cedula = authCode.codusu_cedula, cod_fecha_expiracion = expirationDate });

			/// Cambia de vista
			isCodePhase = true;

			/// Inicia el cronómetro
			StartTimer();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			await JS.InvokeVoidAsync("alert", $"Error al generar el código de recuperación.");
		}
		finally
		{
			await loadingService.HideAsync();
		}
	}

	private async Task HandleVerifyCode()
	{
		// De momento simulamos que el código correcto es "123456"
		if (await authApiService.ValidateAuthCode(authCode))
		{
			timer?.Dispose();
			await JS.InvokeVoidAsync("alert", $"Cambio de contraseña correcto, por favor verificar el correo");
			authService.Login(authCode.codusu_cedula);
			Nav.NavigateTo("/map");
		}
		else
		{
			failedAttempts++;

			if (failedAttempts >= 3)
			{
				timer?.Dispose();
				await JS.InvokeVoidAsync("alert", "Por favor reintentar la recuperación, revise su correo para obtener el código.");
				Nav.NavigateTo("/");
			}
			else
			{
				await JS.InvokeVoidAsync("alert", $"Código incorrecto. Intento {failedAttempts}/3.");
			}
		}
	}

	private void StartTimer()
	{
		timer = new System.Threading.Timer(_ =>
		{
			if (remainingSeconds > 0)
			{
				remainingSeconds--;
				var minutes = remainingSeconds / 60;
				var seconds = remainingSeconds % 60;
				timerDisplay = $"{minutes:D2}:{seconds:D2}";
				InvokeAsync(StateHasChanged);
			}
			else
			{
				timer?.Dispose();
				JS.InvokeVoidAsync("alert", "El tiempo ha expirado, por favor vuelva a intentar la recuperacións.");
				Nav.NavigateTo("/");
			}
		}, null, 0, 1000);
	}

}